Идея скрипта: мы даем возможность обычным непривилегированным пользователям запустить нужную команду/скрипт на удаленном холсте из-под рута. 
Описание структуры скрипта:
1. Создаем на сервере, где будет выполняться скрипт из-под рута, в моем случае /home/alex/scripts/script1.sh, сущности systemd: сокет и шаблон сервиса, который будет запускаться ОС при обращении на этот сокет
В директории /etc/systemd/system создаем файл сокета script1.socket . К слову, мой скрипт ожидает на свой stdin слово и если оно эквивалентно START - создает файл с текущей датой, в противном случае - файл с текстом об ошибке. 

###
root@alexmachine:/etc/systemd/system# cat script1.socket 
[Unit]
Description=Persistent socket for /home/alex/scripts/script1.sh. Needs to start script after socket activation and recieving of client traffic
After=network.target

[Socket] 
ListenStream=127.0.0.1:50000 # сокет слушает на 50000 порту на localhost
Accept=true

[Install]
WantedBy=sockets.target
###

В этой же директории создаем шаблон сервиса, который будет запускаться при поступлении на сокет данных: scipt1@.service (символ @ - указывает, что это будет шаблон для запуска процесса с нужным контекстом)

###
root@alexmachine:/etc/systemd/system# cat script1@.service 
[Unit]
Description=Service for script1 in /home/alex/scripts/
Requires=script1.socket

[Service]
Type=simple
ExecStart=/bin/bash /home/alex/scripts/script1.sh
StandardInput=socket
StandardError=journal
Restart=on-failure
TimeoutStopSec=5

[Install]
WantedBy=multi-user.tar
###

Далее добавляем эти юниты в автозагрузку системы и активируем сокет:
systemctl enable script1.socket
systemctl enable script1@.service
systemctl start script1.socket

Теперь пользователь с удаленного хоста может запустить /home/alex/scripts/script1.sh из-под рута, например, выполнив команду: echo "START" | nc <ip> 50000 ( мой скрипт настроен так, чтобы отрабатывать при получении на вход слова START)

По TCP - хорошо, а по TLS - ещё лучше. Поэтому далее поднимем nginx и бэкенд-сервер на питоне Flask, который будет.

Устанавливаем nginx, проводим следующие настройки сайта:
В директории /etc/nginx/sites-enabled создаем конфиг своего скрипта

###
server {
    listen 443 ssl;
    server_name 192.168.194.128;  # Замените на ваш домен, я указал ip-адрес одного из интерфейсоф сервера

    ssl_certificate /home/alex/scripts/script1/script1-cert.pem;  # Путь к вашему SSL-сертификату
    ssl_certificate_key /home/alex/scripts/script1/script1-key.pem;  # Путь к вашему приватному ключу

    location / {
        proxy_pass http://127.0.0.1:50001;  # Порт, на котором будет работать ваш бэкенд-сервер Flask (Python-скрипт)
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
###

Далее создаем бэкенд, обрабатывающий входящий POST-трафик
Код Flask-сервера

###
root@alexmachine:/home/alex/scripts/script1# cat python-activate-script.py 
from flask import Flask,  request
import subprocess
import logging

logging.basicConfig(
    filename='/home/alex/scripts/script1/access.log',
    filemode='a',
    format='%(asctime)s %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    level=logging.INFO
)

app = Flask(__name__)

@app.route('/', methods=['POST'])
def start_script():
    data = request.get_data(as_text=True)
    if data == "START":
        subprocess.Popen('echo "START" | nc 127.0.0.1 50000', shell=True)
        response = 'Successful start'
        log_message = f'{response},{200}'
        logging.info(log_message)
        return response, 200
    else:
        response = 'Wrong Argument, try again and send me "START"'
        log_message = f'{response},{400}'
        logging.warning(log_message)
        return response, 400

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=50001)
###

[Unit]
Description=Server Flask for script1 in /home/alex/scripts/
After=network.target

[Service]
Type=simple
ExecStart=/usr/bin/python3 /home/alex/scripts/script1/python-activate-script.py
Restart=on-failure
TimeoutStopSec=5

[Install]
WantedBy=multi-user.target
