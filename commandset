0) создадим скрипт, который мы хотим дать испольнять удаленным пользакам
root@alex2machine:/home/alex2# cat /home/alex2/scripts/script1/script1.sh
#!/bin/bash
while read line; do
	date=$(date)
	if [[ "$line" == "START" ]]; then
		echo "Today is $date, good day!" >> /home/alex2/1.txt
		break
	fi
done

1) создание и активация сокета localhost:50000
root@alex2machine:~# cat << EOF > /etc/systemd/system/remote-script1-call.socket 
[Unit]
Description=remote call of script1 by non-root-user
After=network.target

[Socket]
ListenStream=127.0.0.1:50000
Accept=true

[Install]
WantedBy=sockets.target
EOF

Добавляем юнит в автозагрузку и активируем:
root@alex2machine:~# systemctl enable remote-script1-call.socket 
Created symlink /etc/systemd/system/sockets.target.wants/remote-script1-call.socket → /etc/systemd/system/remote-script1-call.socket.
root@alex2machine:~# systemctl start remote-script1-call.socket


Проверить синтаксис можно с помощью команды systemd-analyze verify /etc/systemd/system/<unit_name>
root@alex2machine:/etc/systemd/system# systemctl daemon-reload  - перечитать все юниты

  
2) Создание шаблона сервиса
root@alex2machine:~# cat << EOF > /etc/systemd/system/remote-script1-call@.service
[Unit]
Description=service for run remote called script by non-root users
Requires=remote-script1-call.socket

[Service]
Type=simple
ExecStart=/bin/bash /home/alex2/scripts/script1/script1.sh
StandardInput=socket
StandardError=journal
Restart=on-failure
TimeoutStopSec=1
EOF

3) Теперь мы можем активировать скрипт через сокет: echo "START" | nc 127.0.0.1 50000

4) Настроим HTTPS через nginx и бэкенд в виде сервера FLASK на python
Устанавливаем nginx 
  root@alex2machine:/home/alex2# apt-get -y install nginx
Выпускаем сертификат для нашего сайта nginx (в директории /home/alex2/certs/script1-certs)
  root@alex2machine:/home/alex2/certs/script1-certs# openssl genrsa -out script1-private.key 2048 ### создаем приватный ключ
  root@alex2machine:/home/alex2/certs/script1-certs# openssl req -new -key script1-private.key -out script1.csr ### создаем cert sign request для УЦ
  root@alex2machine:/home/alex2/certs/script1-certs# openssl x509 -req -days 3650 -in script1.csr -signkey script1-private.key -out script1-cert.pem ### подписываем сертификат только что созданным приватным ключом 
Certificate request self-signature ok
subject=C = RU, ST = Golovkovo, L = Golovkovo, O = Leha-Organization, OU = Leha, CN = Leha-server, emailAddress = alexbaevv@gmail.com

Создаем конфигурацию виртуального хоста (сайта) для nginx: добавляем файл конфигурации в директорию /etc/nginx/sites-available/script1-site и делаем символическую ссылку на этот конфиг из директории /etc/nginx/sites-enabled/ для активации виртуального хоста
root@alex2machine:/etc/nginx/sites-available# cat << EOF > /etc/nginx/sites-available/script1-site
server {
    listen 443 ssl;
    server_name 192.168.194.130;

    ssl_certificate /home/alex2/certs/script1-certs/script1-cert.pem;
    ssl_certificate_key /home/alex2/certs/script1-certs/script1-private.key;

    location /script1/execute {
        proxy_pass http://127.0.0.1:50001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
EOF
nginx будет передавать трафик по контексту /script1/execute на сокет 127.0.0.1:50001, на котором будет запущен Flask-сервер
Создаем символическую ссылку на наш конфигурационный файл
root@alex2machine:/etc/nginx/sites-available# ln -s /etc/nginx/sites-available/script1-site /etc/nginx/sites-enabled/
root@alex2machine:/etc/nginx/sites-enabled# ls -lah
итого 8,0K
drwxr-xr-x 2 root root 4,0K янв 31 18:59 .
drwxr-xr-x 8 root root 4,0K янв 31 18:00 ..
lrwxrwxrwx 1 root root   34 янв 31 18:00 default -> /etc/nginx/sites-available/default
lrwxrwxrwx 1 root root   39 янв 31 18:59 script1-site -> /etc/nginx/sites-available/script1-site

Проверим синтакксис конфигурационного файла 
root@alex2machine:/etc/nginx/sites-enabled# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful


5) Настраиваем Flask-сервер и настраиваем систему
Устанавливаем python:
root@alex2machine:/# apt-get -y install python3
Устанавливаем пакеты для создания виртуального окружения 
apt-get -y install python3.12-venv
В директории проекта скрипта (/home/alex2/scripts/script1) создаем виртуальное окружение для установки Flask и активируем его
root@alex2machine:/home/alex2/scripts/script1# python3 -m venv flask_venv ### -m указывает на модуль, который мы хотим использовать, venv - модуль для создания новой виртуальной среды. 
root@alex2machine:/home/alex2/scripts/script1# source ./flask_venv/bin/activate
После активации venv устанавливаем через pip flask:
(flask_venv) root@alex2machine:/home/alex2/scripts/script1/flask_venv# pip install flask




Создаем файл сервера Flask:
cat << EOF > /home/alex2/scripts/script1/flask-server.py
#!/home/alex2/scripts/script1/flask_venv/bin/python3
from flask import Flask,  request
import subprocess
import logging

logging.basicConfig(
    filename='/home/alex2/scripts/script1/access.log',
    filemode='a',
    format='%(asctime)s %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    level=logging.INFO
)

app = Flask(__name__)

@app.route('/script1/execute', methods=['POST'])
def start_script():
    data = request.get_data(as_text=True)
    if data == "START":
        subprocess.Popen('echo "START" | /usr/bin/nc 127.0.0.1 50000', shell=True)
        response = 'Script1 executed'
        log_message = f"OK: {response},{200}"
        logging.info(log_message)
        return response, 200
    else:
        response = 'Wrong Argument. Send "START" to execute script1'
        log_message = f"{response},{400}"
        logging.error(log_message)
        logging.info(f"Recieved data: {data}")
        return response, 400

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=50001)

EOF



6) Обернем Flask в systemd-юнит
Создаем файл юнита
cat << EOF > 
[Unit]
Description=flask-server-for-script1
After=network.target

[Service]
Type=simple
Environment="PATH=$PATH:/home/alex2/scripts/script1/flask_venv" ### Указываем использовать такие переменные для процесса
ExecStart=/home/alex2/scripts/script1/flask_venv/bin/python /home/alex2/scripts/script1/flask-server.py ### Хоть /home/alex2/scripts/script1/flask_venv/bin/python всего лишь символическая ссылка на /usr/bin/python3, однако разница в том, что при обращении к бинарю по такому пути инициализируется окружение и подтягиваются модули из указанной виртуальной среды, а не из system-wide среды, в противном случае python не сможет обнаружить flask-модули
Restart=on-failure
RestartSec=5
TimeoutStopSec=5

[Install]
WantedBy=multi-user.target
EOF

7) Теперь выполнение скрипта можно запустить с удаленного хоста следующей командой curl -X POST -d 'START' https://192.168.194.130/script1/execute

